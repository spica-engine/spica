name: Spica Github Release

on:
  push:
    tags: ["*"]

jobs:
  create_github_release:
    name: Create Github Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tags
        run: |
          last_tag=$(git describe --tags --abbrev=0)
          prev_tag=$(git describe --tags --abbrev=0 $(git rev-list --tags --skip=1 --max-count=1))
          echo "last_tag=$last_tag" >> $GITHUB_ENV
          echo "prev_tag=$prev_tag" >> $GITHUB_ENV

      - name: Generate Release Notes and Release the Version
        run: |
          # Generate release notes from last and previous tags
          response=$(curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases/generate-notes \
            -d '{"tag_name": "${{ env.last_tag }}", "previous_tag_name": "${{ env.prev_tag }}"}')

          # Extract the body from the response
          release_notes=$(echo "$response" | jq -r '.body')

          # Escape problematic characters using jq
          sanitized_notes=$(echo "$release_notes" | jq -Rs .)

          # Release a version
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases\
            -d "{\"tag_name\": \"${{ env.last_tag }}\", \"name\": \"${{ env.last_tag }}\", \"body\": $sanitized_notes, \"draft\": true}"
