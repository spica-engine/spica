name: Spica Continuous Integration

env:
  origin_branch: master
  VERSION: ${{ github.sha }}

on:
  pull_request:
    branches: ["master"]

jobs:
  run_command:
    name: Run Command
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - command: format:check
          - command: build:cli
          - command: build:devkit:*
          - command: build-image:api
          - command: build-image:migrate
          - command: build-image:mongoreplicationcontroller
          - command: test:cli
          - command: test:devkit:*
          - command: test-image:migrate
          - command: test-image:api --build-arg PROJECTS=api/activity/**
          - command: test-image:api --build-arg PROJECTS=api/asset/**
          - command: test-image:api --build-arg PROJECTS=api/bucket
          - command: test-image:api --build-arg PROJECTS=api/bucket/cache
          - command: test-image:api --build-arg PROJECTS=api/bucket/common
          - command: test-image:api --build-arg PROJECTS=api/bucket/expression
          - command: test-image:api --build-arg PROJECTS=api/bucket/graphql
          - command: test-image:api --build-arg PROJECTS=api/bucket/history
          - command: test-image:api --build-arg PROJECTS=api/bucket/hooks
          - command: test-image:api --build-arg PROJECTS=api/bucket/realtime
          - command: test-image:api --build-arg PROJECTS=api/bucket/schemas-realtime
          - command: test-image:api --build-arg PROJECTS=api/bucket/services
          - command: test-image:api --build-arg PROJECTS=api/dashboard/**
          - command: test-image:api --build-arg PROJECTS=api/function
          - command: test-image:api --build-arg PROJECTS=api/function/enqueuer --build-arg RABBITMQ_URL=amqp://172.17.0.1:5672
            rabbitmq: true
          - command: test-image:api --build-arg PROJECTS=api/function/** --build-arg EXCLUDE='api/function/packages/**,api/function,api/function/enqueuer'
          - command: test-image:api --build-arg PROJECTS=api/passport/** --build-arg EXCLUDE='api/passport/apikey/**,api/passport/identity/**'
          - command: test-image:api --build-arg PROJECTS=api/passport/apikey/**
          - command: test-image:api --build-arg PROJECTS=api/passport/identity/**
          - command: test-image:api --build-arg PROJECTS=api/preference/**
          - command: test-image:api --build-arg PROJECTS=api/replication/**
          - command: test-image:api --build-arg PROJECTS=api/status/**
          - command: test-image:api --build-arg PROJECTS=api/storage/**
          - command: test-image:api --build-arg PROJECTS=api/versioncontrol/**
          - command: test-image:api --build-arg PROJECTS=core/**
          - command: test-image:api --build-arg PROJECTS=database/**
          - command: test-image:api --build-arg PROJECTS=filter/**

    steps:
      - name: Free up some space on disk
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: yarn
          cache-dependency-path: yarn.lock

      - name: Restore Node Modules Cache
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # necessary for the "nx lint" command
      - name: Fetch base branch
        run: git fetch origin ${{ env.origin_branch }}:${{ env.origin_branch }}

      - name: Disable Nx Cloud
        run: echo "NX_NO_CLOUD=true" >> $GITHUB_ENV

      - name: Start RabbitMQ if needed
        if: ${{ matrix.rabbitmq || false }}
        run: |
          docker run -d --rm --name rabbitmq \
            -p 5672:5672 \
            rabbitmq:4.1

          echo "Waiting for RabbitMQ..."
          for i in {1..10}; do
            if nc -z localhost 5672; then
              echo "RabbitMQ is ready."
              break
            fi
            sleep 2
          done

      - name: Run Command
        run: yarn run ${{ matrix.command }}

      - name: Stop RabbitMQ if needed
        if: ${{ matrix.rabbitmq || false }}
        run: docker stop rabbitmq || true
