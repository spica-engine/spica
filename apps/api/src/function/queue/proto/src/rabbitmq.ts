/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: rabbitmq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace RabbitMQ {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            content?: Uint8Array;
            fields?: string;
            properties?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set content(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get fields() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set fields(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get properties() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set properties(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            content?: Uint8Array;
            fields?: string;
            properties?: string;
        }): Message {
            const message = new Message({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.fields != null) {
                message.fields = data.fields;
            }
            if (data.properties != null) {
                message.properties = data.properties;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                content?: Uint8Array;
                fields?: string;
                properties?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.fields != null) {
                data.fields = this.fields;
            }
            if (this.properties != null) {
                data.properties = this.properties;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.content.length)
                writer.writeBytes(2, this.content);
            if (this.fields.length)
                writer.writeString(3, this.fields);
            if (this.properties.length)
                writer.writeString(4, this.properties);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.content = reader.readBytes();
                        break;
                    case 3:
                        message.fields = reader.readString();
                        break;
                    case 4:
                        message.properties = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export namespace Message {
        export class Pop extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                id?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("id" in data && data.id != undefined) {
                        this.id = data.id;
                    }
                }
            }
            get id() {
                return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
            }
            set id(value: string) {
                pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data: {
                id?: string;
            }): Pop {
                const message = new Pop({});
                if (data.id != null) {
                    message.id = data.id;
                }
                return message;
            }
            toObject() {
                const data: {
                    id?: string;
                } = {};
                if (this.id != null) {
                    data.id = this.id;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.id.length)
                    writer.writeString(1, this.id);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Pop {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pop();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.id = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Pop {
                return Pop.deserialize(bytes);
            }
        }
        export class Result extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {}) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") { }
            }
            static fromObject(data: {}): Result {
                const message = new Result({});
                return message;
            }
            toObject() {
                const data: {} = {};
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Result {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Result();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Result {
                return Result.deserialize(bytes);
            }
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueueService {
        static definition = {
            pop: {
                path: "/RabbitMQ.Queue/pop",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Message.Pop) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Message.Pop.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes))
            },
            ack: {
                path: "/RabbitMQ.Queue/ack",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message.Result) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.Result.deserialize(new Uint8Array(bytes))
            },
            nack: {
                path: "/RabbitMQ.Queue/nack",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message.Result) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.Result.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract pop(call: grpc_1.ServerUnaryCall<Message.Pop, Message>, callback: grpc_1.sendUnaryData<Message>): void;
        abstract ack(call: grpc_1.ServerUnaryCall<Message, Message.Result>, callback: grpc_1.sendUnaryData<Message.Result>): void;
        abstract nack(call: grpc_1.ServerUnaryCall<Message, Message.Result>, callback: grpc_1.sendUnaryData<Message.Result>): void;
    }
    export class QueueClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueueService.definition, "Queue", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        pop: GrpcUnaryServiceInterface<Message.Pop, Message> = (message: Message.Pop, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Message>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Message>, callback?: grpc_1.requestCallback<Message>): grpc_1.ClientUnaryCall => {
            return super.pop(message, metadata, options, callback);
        };
        ack: GrpcUnaryServiceInterface<Message, Message.Result> = (message: Message, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Message.Result>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Message.Result>, callback?: grpc_1.requestCallback<Message.Result>): grpc_1.ClientUnaryCall => {
            return super.ack(message, metadata, options, callback);
        };
        nack: GrpcUnaryServiceInterface<Message, Message.Result> = (message: Message, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Message.Result>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Message.Result>, callback?: grpc_1.requestCallback<Message.Result>): grpc_1.ClientUnaryCall => {
            return super.nack(message, metadata, options, callback);
        };
    }
}
